import 'package:cloud_firestore/cloud_firestore.dart';

class UserRestrictionModel {
  final String id;
  final String userId;
  final String userEmail;
  final String restrictionType; // 'suspended', 'banned', 'restricted_posting', 'restricted_bidding'
  final String reason;
  final String adminId;
  final Timestamp createdAt;
  final Timestamp? expiresAt;
  final bool isActive;
  final Map<String, dynamic>? metadata;

  const UserRestrictionModel({
    required this.id,
    required this.userId,
    required this.userEmail,
    required this.restrictionType,
    required this.reason,
    required this.adminId,
    required this.createdAt,
    this.expiresAt,
    required this.isActive,
    this.metadata,
  });

  factory UserRestrictionModel.fromJson(String docId, Map<String, dynamic> json) {
    return UserRestrictionModel(
      id: docId,
      userId: json['user_id'] ?? '',
      userEmail: json['user_email'] ?? '',
      restrictionType: json['restriction_type'] ?? '',
      reason: json['reason'] ?? '',
      adminId: json['admin_id'] ?? '',
      createdAt: json['created_at'] ?? Timestamp.now(),
      expiresAt: json['expires_at'],
      isActive: json['is_active'] ?? true,
      metadata: json['metadata'],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'user_id': userId,
      'user_email': userEmail,
      'restriction_type': restrictionType,
      'reason': reason,
      'admin_id': adminId,
      'created_at': createdAt,
      'expires_at': expiresAt,
      'is_active': isActive,
      'metadata': metadata,
    };
  }

  bool get isExpired {
    if (expiresAt == null) return false;
    return DateTime.now().isAfter(expiresAt!.toDate());
  }
}

class UserActionLogModel {
  final String id;
  final String userId;
  final String userEmail;
  final String actionType; // 'login', 'signup', 'post_ad', 'place_bid', 'message', etc.
  final Timestamp timestamp;
  final String? ipAddress;
  final String? deviceInfo;
  final Map<String, dynamic>? metadata;

  const UserActionLogModel({
    required this.id,
    required this.userId,
    required this.userEmail,
    required this.actionType,
    required this.timestamp,
    this.ipAddress,
    this.deviceInfo,
    this.metadata,
  });

  factory UserActionLogModel.fromJson(String docId, Map<String, dynamic> json) {
    return UserActionLogModel(
      id: docId,
      userId: json['user_id'] ?? '',
      userEmail: json['user_email'] ?? '',
      actionType: json['action_type'] ?? '',
      timestamp: json['timestamp'] ?? Timestamp.now(),
      ipAddress: json['ip_address'],
      deviceInfo: json['device_info'],
      metadata: json['metadata'],
    );
  }
}

// Extended user model for admin purposes
class AdminUserModel {
  final String id;
  final String fullName;
  final String username;
  final String email;
  final String? profileImageUrl;
  final Timestamp createdAt;
  final Timestamp updatedAt;
  final bool isActive;
  final int totalAds;
  final int activeAds;
  final int totalBids;
  final int activeBids;
  final int totalSales;
  final int totalPurchases;
  final double totalRevenue; // Total revenue generated by the user (sales)
  final double totalSpent; // Total spent by user (purchases)
  final List<String> flags;
  final bool isRestricted;
  final List<UserRestrictionModel> restrictions;
  final Map<String, dynamic>? adminNotes;
  final String? lastLoginIP;
  final Timestamp? lastLoginAt;
  final List<UserActionLogModel> recentActions;
  final int reportCount; // Number of times user has been reported
  final Map<String, int> activityMetrics; // Map of activity type to count
  final bool isVerified; // Email verification status
  final String accountStatus; // 'active', 'pending', 'deactivated', 'banned'
  final String? verificationDocumentUrl; // URL to user's ID verification document if applicable

  const AdminUserModel({
    required this.id,
    required this.fullName,
    required this.username,
    required this.email,
    this.profileImageUrl,
    required this.createdAt,
    required this.updatedAt,
    required this.isActive,
    this.totalAds = 0,
    this.activeAds = 0,
    this.totalBids = 0,
    this.activeBids = 0,
    this.totalSales = 0,
    this.totalPurchases = 0,
    this.totalRevenue = 0.0,
    this.totalSpent = 0.0,
    this.flags = const [],
    this.isRestricted = false,
    this.restrictions = const [],
    this.adminNotes,
    this.lastLoginIP,
    this.lastLoginAt,
    this.recentActions = const [],
    this.reportCount = 0,
    this.activityMetrics = const {},
    this.isVerified = false,
    this.accountStatus = 'active',
    this.verificationDocumentUrl,
  });

  factory AdminUserModel.fromUserModel(String docId, Map<String, dynamic> json, {List<UserRestrictionModel>? userRestrictions, List<UserActionLogModel>? userActions}) {
    return AdminUserModel(
      id: docId,
      fullName: json['fullName'] ?? '',
      username: json['username'] ?? '',
      email: json['email'] ?? '',
      profileImageUrl: json['profileImageUrl'],
      createdAt: json['createdAt'] ?? Timestamp.now(),
      updatedAt: json['updatedAt'] ?? Timestamp.now(),
      isActive: json['isActive'] ?? true,
      totalAds: json['totalAds'] ?? 0,
      activeAds: json['activeAds'] ?? 0,
      totalBids: json['totalBids'] ?? 0,
      activeBids: json['activeBids'] ?? 0,
      totalSales: json['totalSales'] ?? 0,
      totalPurchases: json['totalPurchases'] ?? 0,
      totalRevenue: (json['totalRevenue'] ?? 0).toDouble(),
      totalSpent: (json['totalSpent'] ?? 0).toDouble(),
      flags: List<String>.from(json['flags'] ?? []),
      isRestricted: json['isRestricted'] ?? false,
      restrictions: userRestrictions ?? [],
      adminNotes: json['adminNotes'],
      lastLoginIP: json['lastLoginIP'],
      lastLoginAt: json['lastLoginAt'],
      recentActions: userActions ?? [],
      reportCount: json['reportCount'] ?? 0,
      activityMetrics: json['activityMetrics'] != null ? 
          Map<String, int>.from(json['activityMetrics']) : 
          {},
      isVerified: json['isVerified'] ?? false,
      accountStatus: json['accountStatus'] ?? 'active',
      verificationDocumentUrl: json['verificationDocumentUrl'],
    );
  }

  bool get isSuspicious {
    return flags.isNotEmpty || 
           isRestricted ||
           (totalAds == 0 && totalBids > 10) ||
           reportCount > 2;
  }
  
  bool get requiresVerification {
    return (totalAds > 5 || totalBids > 20) && !isVerified;
  }
  
  String get userStatus {
    if (isRestricted) {
      final activeRestrictions = restrictions.where((r) => r.isActive && !r.isExpired).toList();
      if (activeRestrictions.isNotEmpty) {
        if (activeRestrictions.any((r) => r.restrictionType == 'banned')) return 'banned';
        if (activeRestrictions.any((r) => r.restrictionType == 'suspended')) return 'suspended';
        return 'restricted';
      }
    }
    if (!isActive) return 'deactivated';
    return 'active';
  }
  
  double get userScore {
    // Calculate user reliability score based on activities and metrics
    double score = 50; // Default starting score
    
    // Positive factors
    if (isVerified) score += 15;
    if (totalAds > 0) score += 5;
    if (totalSales > 0) score += 10;
    if (totalPurchases > 0) score += 5;
    
    // Negative factors
    if (reportCount > 0) score -= (reportCount * 5);
    if (flags.isNotEmpty) score -= (flags.length * 10);
    if (isRestricted) score -= 20;
    
    // Cap the score between 0 and 100
    return score.clamp(0, 100);
  }
}
